from aiogram import Dispatcher, types
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from gamingdate_keyboards import gamingdate_main_menu, search_navigation_keyboard, likes_keyboard, like_action_keyboard, back_to_likes_keyboard
from gamingdate_func import find_potential_friends, add_like, send_notification, get_likes, remove_like 
from base_keyboards import reply_menu_keyboard
from personalAccount_DB import get_user, update_user


async def cmd_gmdate(message: types.Message | types.CallbackQuery, reply_markup=None):
    user_data = await get_user(message.from_user.id)
    if not user_data:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        if isinstance(message, types.Message):
            await message.answer("–í–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ! –ß—Ç–æ–±—ã –¥–∞–ª—å—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º, –Ω—É–∂–Ω–æ –µ–≥–æ —Å–æ–∑–¥–∞—Ç—å! –î–ª—è —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ - /start", reply_markup=keyboard)
        elif isinstance(message, types.CallbackQuery):
            await message.message.edit_text("–í–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ! –ß—Ç–æ–±—ã –¥–∞–ª—å—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º, –Ω—É–∂–Ω–æ –µ–≥–æ —Å–æ–∑–¥–∞—Ç—å! –î–ª—è —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ - /start", reply_markup=keyboard)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º display_status –Ω–∞ '–¥–∞'
    await update_user(message.from_user.id, 'display_status', '–¥–∞')

    welcome_text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GamingDate! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –¥—Ä—É–∑–µ–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –∏–≥—Ä, –≤–∫–ª—é—á–∞—è –Ω–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã. "
        "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –º–æ–∂–Ω–æ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.\n\n"
        "–ü—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∞–Ω–∫–µ—Ç –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Å–µ—Ä–≤–∏—Å–µ! "
        "–ò–∑–º–µ–Ω–∏—Ç—å —ç—Ç–æ –º–æ–∂–Ω–æ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ."
    )

    try:
        if isinstance(message, types.Message):
            await message.answer(welcome_text, reply_markup=reply_markup or gamingdate_main_menu())
        elif isinstance(message, types.CallbackQuery):
            await message.message.edit_text(welcome_text, reply_markup=reply_markup or gamingdate_main_menu())
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å–∞: {e}")

async def start_search(call: CallbackQuery, state: FSMContext):
    try:
        await call.message.delete()
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –∑–¥–µ—Å—å
    
    user_data = await get_user(call.from_user.id)
    if user_data:
        viewed_users = set()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Å—Ç–æ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        potential_friends = await find_potential_friends(user_data, viewed_users)
        if not potential_friends:
            await call.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return
        await state.update_data(potential_friends=potential_friends, current_index=0, viewed_users=viewed_users)
        await show_profile(call.message, potential_friends[0], state)
        
async def show_profile(message: Message, profile, state: FSMContext):
    profile_text = (
        f"–ò–º—è: {profile[1]}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {profile[3]}\n"
        f"–ì–µ–Ω–¥–µ—Ä: {profile[2]}\n"
        f"–ì–æ—Ä–æ–¥: {profile[4]}\n"
        f"–ò–≥—Ä—ã: {profile[6]}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {profile[7]}\n"
    )
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø—Ä–æ—Ñ–∏–ª—è
    if profile[5]:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        photos = profile[5].split(',')
        media = [types.InputMediaPhoto(media=photo) for photo in photos]
        await message.answer_media_group(media)
    
    await message.answer(profile_text, reply_markup=search_navigation_keyboard())
    data = await state.get_data()
    viewed_users = data.get('viewed_users', set())
    viewed_users.add(profile[0])  # –ò—Å–ø–æ–ª—å–∑—É–µ–º add –≤–º–µ—Å—Ç–æ append
    await state.update_data(viewed_users=viewed_users)

async def handle_search_navigation(message: types.Message, state: FSMContext):
    data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    if 'potential_friends' not in data or 'current_index' not in data:
        await message.answer("–ù–µ –º–æ–≥—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, —Ç–∞–∫ –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.", reply_markup=reply_menu_keyboard)
        return

    potential_friends = data['potential_friends']
    current_index = data['current_index']
    viewed_users = data.get('viewed_users', set())

    if message.text == "‚è≠Ô∏è":
        current_index += 1
        while current_index < len(potential_friends) and potential_friends[current_index][0] in viewed_users:
            current_index += 1
        if current_index < len(potential_friends):
            await state.update_data(current_index=current_index)
            await show_profile(message, potential_friends[current_index], state)
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥—Ä—É–∑–µ–π, –µ—Å–ª–∏ –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã
            user_data = await get_user(message.from_user.id)
            viewed_users.clear()  # –û–±–Ω—É–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            potential_friends = await find_potential_friends(user_data, viewed_users)
            if potential_friends:
                current_index = 0
                await state.update_data(potential_friends=potential_friends, current_index=current_index, viewed_users=viewed_users)
                await show_profile(message, potential_friends[current_index], state)
            else:
                await message.answer("–ë–æ–ª—å—à–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    elif message.text == "üëæ":
        liked_user_id = potential_friends[current_index][0]
        await add_like(message.from_user.id, liked_user_id)
        await send_notification(message.bot, liked_user_id, "–í–∞—Å –õ–∞–π–∫–Ω—É–ª–∏! –ë–µ–≥–æ–º —Å–º–æ—Ç—Ä–µ—Ç—å!")        
        await message.answer("–õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    elif message.text == "–•–≤–∞—Ç–∏—Ç":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏ –∏ –º–µ–Ω—é
        await message.answer("–ù–∞–¥–µ—é—Å—å, —Ç—ã —Å–µ–≥–æ–¥–Ω—è –Ω–∞—à–µ–ª —Å–µ–±–µ –Ω–æ–≤–æ–≥–æ –¥—Ä—É–≥–∞. –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è —Å–∫–æ—Ä–µ–µ –∑–∞ –Ω–æ–≤—ã–º –æ–±—â–µ–Ω–∏–µ–º!", reply_markup=reply_menu_keyboard)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é cmd_gmdate
        await cmd_gmdate(message)
        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        await state.clear()

async def view_likes(call: CallbackQuery, state: FSMContext, page: int = 0):
    user_id = call.from_user.id
    likes = await get_likes(user_id)
    if not likes:
        await call.message.edit_text(
            "–ù–∏–∫—Ç–æ –µ—â–µ –Ω–µ –ª–∞–π–∫–Ω—É–ª –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –≤ GamingDate!",
            reply_markup=likes_keyboard([], 0, 0)
        )
        return

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    likes_per_page = 6
    start_index = page * likes_per_page
    end_index = start_index + likes_per_page
    paginated_likes = likes[start_index:end_index]
    likes_data = [await get_user(int(like)) for like in paginated_likes]
    likes_text = "\n".join([f"{index + 1}. {like[1]}, {like[3]}, {like[2]}, {like[4]}, {like[6]}" for index, like in enumerate(likes_data, start=start_index)])

    await call.message.edit_text(
        f"–í–∞—à–∏ –ª–∞–π–∫–∏:\n{likes_text}",
        reply_markup=likes_keyboard(paginated_likes, page, len(likes))
    )

async def view_like(call: CallbackQuery, state: FSMContext):
    query_data = call.data.split("_")
    index = int(query_data[2]) - 1
    user_id = call.from_user.id
    likes = await get_likes(user_id)
    liked_user_id = int(likes[index])
    liked_user_data = await get_user(liked_user_id)
    
    profile_text = (
        f"–ò–º—è: {liked_user_data[1]}\n"
        f"–ü–æ–ª: {liked_user_data[2]}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {liked_user_data[3]}\n"
        f"–ì–æ—Ä–æ–¥: {liked_user_data[4]}\n"
        f"–ò–≥—Ä—ã: {liked_user_data[6]}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {liked_user_data[7]}\n"
    )

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await call.message.delete()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø—Ä–æ—Ñ–∏–ª—è
    if liked_user_data[5]:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        photos = liked_user_data[5]
        media = [types.InputMediaPhoto(media=photo) for photo in photos]
        await call.message.answer_media_group(media)

    await call.message.answer(profile_text, reply_markup=like_action_keyboard())
    await state.update_data(current_like_index=index)

async def like_user(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    data = await state.get_data()
    likes = await get_likes(user_id)
    current_index = data['current_like_index']
    liked_user_id = int(likes[current_index])

    # –£–¥–∞–ª–µ–Ω–∏–µ –ª–∞–π–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
    await remove_like(user_id, liked_user_id)
    liked_user_data = await get_user(liked_user_id)
    user_data = await get_user(user_id)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Å—Å—ã–ª–∫–∏
    await call.message.edit_text(f"–í—ã –ª–∞–π–∫–Ω—É–ª–∏ {liked_user_data[1]}. –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å: {liked_user_data[8]}", reply_markup=back_to_likes_keyboard())
    await send_notification(call.bot, liked_user_id, f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ª–∞–π–∫–Ω—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data[1]}! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å: {user_data[8]}")

async def skip_user(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    data = await state.get_data()
    likes = await get_likes(user_id)
    current_index = data['current_like_index']

    if current_index >= len(likes):
        await call.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –∏–Ω–¥–µ–∫—Å –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å–ø–∏—Å–∫–∞.")
        return

    liked_user_id = int(likes[current_index])

    # –£–¥–∞–ª–µ–Ω–∏–µ –ª–∞–π–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
    await remove_like(user_id, liked_user_id)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    likes = await get_likes(user_id)
    if current_index >= len(likes):
        current_index = max(0, len(likes) - 1)
    
    await state.update_data(current_like_index=current_index)

    # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –ª–∞–π–∫–æ–≤
    await view_likes(call, state)

async def back_to_likes(call: CallbackQuery, state: FSMContext):
    await view_likes(call, state)

async def dismiss_notification(call: CallbackQuery):
    await call.message.delete()

def register_handlers_gamingdate(dp: Dispatcher):
    dp.callback_query.register(cmd_gmdate, lambda c: c.data == "call_gamingdate")
    dp.callback_query.register(start_search, lambda c: c.data == "start_search")
    dp.message.register(handle_search_navigation, lambda message: message.text in ["üëæ", "‚è≠Ô∏è", "–•–≤–∞—Ç–∏—Ç"])
    dp.callback_query.register(view_likes, lambda c: c.data == "view_gdates")
    dp.callback_query.register(view_like, lambda c: c.data.startswith("view_like_"))
    dp.callback_query.register(like_user, lambda c: c.data == "like_user")
    dp.callback_query.register(skip_user, lambda c: c.data == "skip_user")
    dp.callback_query.register(back_to_likes, lambda c: c.data == "back_to_likes")
    dp.callback_query.register(dismiss_notification, lambda c: c.data == "dismiss")
    dp.callback_query.register(lambda call, state: view_likes(call, state, int(call.data.split("_")[2])), lambda c: c.data.startswith("view_likes_"))