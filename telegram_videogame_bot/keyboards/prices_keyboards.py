import math

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

GAMES_PER_PAGE = 15

def build_games_keyboard(game_groups: list, page: int = 0) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    builder = InlineKeyboardBuilder()

    start_index = page * GAMES_PER_PAGE
    end_index = start_index + GAMES_PER_PAGE
    
    for i, game_group in enumerate(game_groups[start_index:end_index]):
        original_index = start_index + i
        builder.row(InlineKeyboardButton(text=game_group["title"], callback_data=f"price_game_{original_index}"))

    total_pages = math.ceil(len(game_groups) / GAMES_PER_PAGE)
    if total_pages > 1:
        pagination_buttons = []
        if page > 0:
            pagination_buttons.append(InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data=f"price_page_{page - 1}"))
        pagination_buttons.append(InlineKeyboardButton(text=f"{page + 1}/{total_pages}", callback_data="noop"))
        if page < total_pages - 1:
            pagination_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ¬ª", callback_data=f"price_page_{page + 1}"))
        builder.row(*pagination_buttons)

    builder.row(InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu"))
    return builder.as_markup()

def back_to_games_list_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_games_list"))
    builder.row(InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="main_menu"))
    return builder.as_markup()

def offers_keyboard(game_id_idx: str):
    return back_to_games_list_keyboard()

def cancel_keyboard():
    return InlineKeyboardBuilder().row(InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="main_menu")).as_markup()

# --- –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏ –†–µ–≥–∏–æ–Ω—ã ---

PLATFORMS = [
    ("pc", "–ü–ö"),
    ("ps5", "PlayStation 5"),
    ("ps4", "PlayStation 4"),
    ("xbox_series", "Xbox Series S|X"),
    ("xbox_one", "Xbox One"),
    ("switch", "Nintendo Switch"),
]

REGIONS = [
    ("RU", "üá∑üá∫ –†–æ—Å—Å–∏—è"),
    ("TR", "üáπüá∑ –¢—É—Ä—Ü–∏—è"),
    ("AR", "üá¶üá∑ –ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞"),
    ("BR", "üáßüá∑ –ë—Ä–∞–∑–∏–ª–∏—è"),
    ("US", "üá∫üá∏ –°–®–ê"),
]

def build_platform_keyboard(selected: set[str]) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for code, title in PLATFORMS:
        prefix = "‚úÖ " if code in selected else "‚òëÔ∏è"
        builder.row(InlineKeyboardButton(text=f"{prefix} {title}", callback_data=f"plat_toggle:{code}"))

    if selected:
        builder.row(InlineKeyboardButton(text="‚úîÔ∏è –î–∞–ª–µ–µ", callback_data="plat_ok"))
    builder.row(InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu"))
    return builder.as_markup()

def build_regions_keyboard(selected: set[str]) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    row = []
    for code, title in REGIONS:
        prefix = "‚úÖ" if code in selected else "‚òëÔ∏è"
        btn = InlineKeyboardButton(text=f"{prefix} {title}", callback_data=f"region_toggle:{code}")
        row.append(btn)
        if len(row) >= 2:
            builder.row(*row)
            row = []
    if row:
        builder.row(*row)

    if selected and len(selected) == len(REGIONS):
        builder.row(InlineKeyboardButton(text="‚ùå –°–Ω—è—Ç—å –≤—Å—ë", callback_data="region_select_all"))
    else:
        builder.row(InlineKeyboardButton(text="‚úÖ –í—ã–¥–µ–ª–∏—Ç—å –≤—Å—ë", callback_data="region_select_all"))

    if selected:
        builder.row(InlineKeyboardButton(text="‚úîÔ∏è –î–∞–ª–µ–µ", callback_data="region_ok"))

    builder.row(InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="price_back"))
    return builder.as_markup() 